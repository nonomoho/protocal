% PURPOSE: Syncronisation between two servers before sending a common request to another one
% DESCRIPTION:
% Two servers: Shell (S) and Code (C)
% Third server: Master (M)

% S ------- {Mess1.Ns.S}_PKc ------------> C
% S <------ {Mess1.Mess2.Ns.Nc}_PKs ------ C
% S ------- {OK.Mess1.Mess2.Nc}_PKc -----> C
% S -------------- {Mess1.Mess2}_PKm ------------> M
% S <------------- {OK.rep}_PKs ------------------ M

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Protocal: 

% Role of Shell (S):

role shell (
    S, C: agent,
    PKs, PKc, PKm: public_key,
    Mess1: text,
    Snd, Rcv: channel(dy)
)

played_by S def=

    local 
        State: nat,
        Ns, Nc, Mess2, Rep: text

    init
        State:=0

    transition

        % Start communication with Code and start creating the request
        begin.
            State=0
            /\ Rcv(start) 
        =|>
            State':=1
            /\ Ns':=new()
            /\ Snd({Mess1.Ns'.S}_PKc)
            /\ secret(Ns',sns,{S,C})

        % Receive full message from code and confirm the reception of Code's nonce
        messageComplete.
            State=1
            /\ Rcv({Mess1.Mess2'.Ns.Nc'.C}_PKs)
        =|>
            State':=2
            /\ Snd({ok.Mess1.Mess2'.Nc'}_PKc)

        % Send full message to Master
        send.
            State=2
        =|>
            State':=3
            /\ Snd({Mess1.Mess2}_PKm)

        % Receive response
        receive.
            State=3
            /\ Rcv(Rep') =|>
            State':=4

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Role of Code (C):

role code (
    S, C: agent,
    PKs, PKc, PKm: public_key,
    Mess2: text,
    Snd, Rcv: channel(dy)
)

played_by C def=

    local 
        State: nat,
        Ns, Nc, Mess1: text

    init
        State:=0

    transition

        % Receive first message and first part of the request from Shell 
        begin.
            State=0
            /\ Rcv({Mess1'.Ns'.S}_PKc)
        =|>
            State':=1
            /\ Nc':=new()
            /\ Snd({Mess1'.Mess2.Ns'.Nc'.C}_PKs)
            /\ secret(Nc',snc,{C,S})

        % Receive the confirmation from Shell
        messageComplete.
            State=1
            /\ Rcv({ok.Mess1.Mess2.Nc}_PKc)
        =|>
            State':=2


end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Role of Master (M):

role master (
    M: agent,
    PKm: public_key,
    Snd, Rcv: channel(dy)
)

played_by M def=

    local 
        State: nat,
        Rep, Mess1, Mess2: text

    init
        State:=0  

    transition  

    % Receive Mess1.Mess2 and send response
    send.
        State=0
        /\ Rcv({Mess1'.Mess2'}_PKm)
    =|>
        State':=1
        /\ Rep':=new()
        /\ Snd(Rep')

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Definition of session role:

role session(
    S, C: agent,
    PKs, PKc, PKm: public_key,
    Mess1, Mess2: text,
    Snd, Rcv: channel(dy)
) def=

composition 
    shell(S,C,PKs,PKc,PKm,Mess1,Snd,Rcv)
    /\ code(S,C,PKs,PKc,PKm,Mess2,Snd,Rcv)

end role


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% The main role:

role environment() def=

    local 
        Snd, Rcv: channel(dy)

    const
        s, c, m, i: agent,
        ok, mess1, mess2: text,
        pks, pkc, pki, pkm: public_key,
        sns, snc: protocol_id

    intruder_knowledge = {s, c, m, pks, pkc, pkm, pki, inv(pki)}

    composition
    master(m,pkm,Snd,Rcv)
    /\ session(s,c,pks,pkc,pkm,mess1,mess2,Snd,Rcv)
    /\ session(s,i,pks,pki,pkm,mess1,mess2,Snd,Rcv)

end role

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Description of goal properties:

goal

secrecy_of sns, snc % Keep secret the nonces
 
end goal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Call of the main role:

environment()